/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsBusinessObjectViewSummary
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsBusinessObjectViewSummary :  IEquatable<TrebuchetWebApiDataContractsBusinessObjectViewSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsBusinessObjectViewSummary" /> class.
        /// </summary>
        /// <param name="groupSummaries">groupSummaries.</param>
        /// <param name="image">image.</param>
        /// <param name="isPartOfView">isPartOfView.</param>
        /// <param name="busObId">busObId.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="group">group.</param>
        /// <param name="lookup">lookup.</param>
        /// <param name="major">major.</param>
        /// <param name="name">name.</param>
        /// <param name="supporting">supporting.</param>
        public TrebuchetWebApiDataContractsBusinessObjectViewSummary(List<TrebuchetWebApiDataContractsBusinessObjectViewSummary> groupSummaries = default(List<TrebuchetWebApiDataContractsBusinessObjectViewSummary>), string image = default(string), bool? isPartOfView = default(bool?), string busObId = default(string), string displayName = default(string), bool? group = default(bool?), bool? lookup = default(bool?), bool? major = default(bool?), string name = default(string), bool? supporting = default(bool?))
        {
            this.GroupSummaries = groupSummaries;
            this.Image = image;
            this.IsPartOfView = isPartOfView;
            this.BusObId = busObId;
            this.DisplayName = displayName;
            this.Group = group;
            this.Lookup = lookup;
            this.Major = major;
            this.Name = name;
            this.Supporting = supporting;
        }
        
        /// <summary>
        /// Gets or Sets GroupSummaries
        /// </summary>
        [DataMember(Name="groupSummaries", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsBusinessObjectViewSummary> GroupSummaries { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets IsPartOfView
        /// </summary>
        [DataMember(Name="isPartOfView", EmitDefaultValue=false)]
        public bool? IsPartOfView { get; set; }

        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public bool? Group { get; set; }

        /// <summary>
        /// Gets or Sets Lookup
        /// </summary>
        [DataMember(Name="lookup", EmitDefaultValue=false)]
        public bool? Lookup { get; set; }

        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name="major", EmitDefaultValue=false)]
        public bool? Major { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Supporting
        /// </summary>
        [DataMember(Name="supporting", EmitDefaultValue=false)]
        public bool? Supporting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsBusinessObjectViewSummary {\n");
            sb.Append("  GroupSummaries: ").Append(this.GroupSummaries).Append("\n");
            sb.Append("  Image: ").Append(this.Image).Append("\n");
            sb.Append("  IsPartOfView: ").Append(this.IsPartOfView).Append("\n");
            sb.Append("  BusObId: ").Append(this.BusObId).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  Group: ").Append(this.Group).Append("\n");
            sb.Append("  Lookup: ").Append(this.Lookup).Append("\n");
            sb.Append("  Major: ").Append(this.Major).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Supporting: ").Append(this.Supporting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsBusinessObjectViewSummary);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsBusinessObjectViewSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsBusinessObjectViewSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsBusinessObjectViewSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupSummaries == input.GroupSummaries ||
                    this.GroupSummaries != null &&
                    this.GroupSummaries.SequenceEqual(input.GroupSummaries)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.IsPartOfView == input.IsPartOfView ||
                    (this.IsPartOfView != null &&
                    this.IsPartOfView.Equals(input.IsPartOfView))
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Lookup == input.Lookup ||
                    (this.Lookup != null &&
                    this.Lookup.Equals(input.Lookup))
                ) && 
                (
                    this.Major == input.Major ||
                    (this.Major != null &&
                    this.Major.Equals(input.Major))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Supporting == input.Supporting ||
                    (this.Supporting != null &&
                    this.Supporting.Equals(input.Supporting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupSummaries != null)
                    hashCode = hashCode * 59 + this.GroupSummaries.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.IsPartOfView != null)
                    hashCode = hashCode * 59 + this.IsPartOfView.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Lookup != null)
                    hashCode = hashCode * 59 + this.Lookup.GetHashCode();
                if (this.Major != null)
                    hashCode = hashCode * 59 + this.Major.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Supporting != null)
                    hashCode = hashCode * 59 + this.Supporting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
