/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsUsersUserSaveV2Request
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsUsersUserSaveV2Request :  IEquatable<TrebuchetWebApiDataContractsUsersUserSaveV2Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsUsersUserSaveV2Request" /> class.
        /// </summary>
        /// <param name="accountLocked">accountLocked.</param>
        /// <param name="allCultures">allCultures.</param>
        /// <param name="busObId">busObId.</param>
        /// <param name="busObPublicId">busObPublicId.</param>
        /// <param name="busObRecId">busObRecId.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="ldapRequired">ldapRequired.</param>
        /// <param name="loginId">loginId.</param>
        /// <param name="nextPasswordResetDate">nextPasswordResetDate.</param>
        /// <param name="password">password.</param>
        /// <param name="passwordNeverExpires">passwordNeverExpires.</param>
        /// <param name="securityGroupId">securityGroupId.</param>
        /// <param name="specificCulture">specificCulture.</param>
        /// <param name="userCannotChangePassword">userCannotChangePassword.</param>
        /// <param name="userInfoFields">userInfoFields.</param>
        /// <param name="userMustChangePasswordAtNextLogin">userMustChangePasswordAtNextLogin.</param>
        /// <param name="windowsUserId">windowsUserId.</param>
        public TrebuchetWebApiDataContractsUsersUserSaveV2Request(bool? accountLocked = default(bool?), bool? allCultures = default(bool?), string busObId = default(string), string busObPublicId = default(string), string busObRecId = default(string), string displayName = default(string), bool? ldapRequired = default(bool?), string loginId = default(string), DateTime? nextPasswordResetDate = default(DateTime?), string password = default(string), bool? passwordNeverExpires = default(bool?), string securityGroupId = default(string), string specificCulture = default(string), bool? userCannotChangePassword = default(bool?), List<TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem> userInfoFields = default(List<TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem>), bool? userMustChangePasswordAtNextLogin = default(bool?), string windowsUserId = default(string))
        {
            this.AccountLocked = accountLocked;
            this.AllCultures = allCultures;
            this.BusObId = busObId;
            this.BusObPublicId = busObPublicId;
            this.BusObRecId = busObRecId;
            this.DisplayName = displayName;
            this.LdapRequired = ldapRequired;
            this.LoginId = loginId;
            this.NextPasswordResetDate = nextPasswordResetDate;
            this.Password = password;
            this.PasswordNeverExpires = passwordNeverExpires;
            this.SecurityGroupId = securityGroupId;
            this.SpecificCulture = specificCulture;
            this.UserCannotChangePassword = userCannotChangePassword;
            this.UserInfoFields = userInfoFields;
            this.UserMustChangePasswordAtNextLogin = userMustChangePasswordAtNextLogin;
            this.WindowsUserId = windowsUserId;
        }
        
        /// <summary>
        /// Gets or Sets AccountLocked
        /// </summary>
        [DataMember(Name="accountLocked", EmitDefaultValue=false)]
        public bool? AccountLocked { get; set; }

        /// <summary>
        /// Gets or Sets AllCultures
        /// </summary>
        [DataMember(Name="allCultures", EmitDefaultValue=false)]
        public bool? AllCultures { get; set; }

        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets BusObPublicId
        /// </summary>
        [DataMember(Name="busObPublicId", EmitDefaultValue=false)]
        public string BusObPublicId { get; set; }

        /// <summary>
        /// Gets or Sets BusObRecId
        /// </summary>
        [DataMember(Name="busObRecId", EmitDefaultValue=false)]
        public string BusObRecId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets LdapRequired
        /// </summary>
        [DataMember(Name="ldapRequired", EmitDefaultValue=false)]
        public bool? LdapRequired { get; set; }

        /// <summary>
        /// Gets or Sets LoginId
        /// </summary>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// Gets or Sets NextPasswordResetDate
        /// </summary>
        [DataMember(Name="nextPasswordResetDate", EmitDefaultValue=false)]
        public DateTime? NextPasswordResetDate { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets PasswordNeverExpires
        /// </summary>
        [DataMember(Name="passwordNeverExpires", EmitDefaultValue=false)]
        public bool? PasswordNeverExpires { get; set; }

        /// <summary>
        /// Gets or Sets SecurityGroupId
        /// </summary>
        [DataMember(Name="securityGroupId", EmitDefaultValue=false)]
        public string SecurityGroupId { get; set; }

        /// <summary>
        /// Gets or Sets SpecificCulture
        /// </summary>
        [DataMember(Name="specificCulture", EmitDefaultValue=false)]
        public string SpecificCulture { get; set; }

        /// <summary>
        /// Gets or Sets UserCannotChangePassword
        /// </summary>
        [DataMember(Name="userCannotChangePassword", EmitDefaultValue=false)]
        public bool? UserCannotChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets UserInfoFields
        /// </summary>
        [DataMember(Name="userInfoFields", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem> UserInfoFields { get; set; }

        /// <summary>
        /// Gets or Sets UserMustChangePasswordAtNextLogin
        /// </summary>
        [DataMember(Name="userMustChangePasswordAtNextLogin", EmitDefaultValue=false)]
        public bool? UserMustChangePasswordAtNextLogin { get; set; }

        /// <summary>
        /// Gets or Sets WindowsUserId
        /// </summary>
        [DataMember(Name="windowsUserId", EmitDefaultValue=false)]
        public string WindowsUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsUsersUserSaveV2Request {\n");
            sb.Append("  AccountLocked: ").Append(this.AccountLocked).Append("\n");
            sb.Append("  AllCultures: ").Append(this.AllCultures).Append("\n");
            sb.Append("  BusObId: ").Append(this.BusObId).Append("\n");
            sb.Append("  BusObPublicId: ").Append(this.BusObPublicId).Append("\n");
            sb.Append("  BusObRecId: ").Append(this.BusObRecId).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  LdapRequired: ").Append(this.LdapRequired).Append("\n");
            sb.Append("  LoginId: ").Append(this.LoginId).Append("\n");
            sb.Append("  NextPasswordResetDate: ").Append(this.NextPasswordResetDate).Append("\n");
            sb.Append("  Password: ").Append(this.Password).Append("\n");
            sb.Append("  PasswordNeverExpires: ").Append(this.PasswordNeverExpires).Append("\n");
            sb.Append("  SecurityGroupId: ").Append(this.SecurityGroupId).Append("\n");
            sb.Append("  SpecificCulture: ").Append(this.SpecificCulture).Append("\n");
            sb.Append("  UserCannotChangePassword: ").Append(this.UserCannotChangePassword).Append("\n");
            sb.Append("  UserInfoFields: ").Append(this.UserInfoFields).Append("\n");
            sb.Append("  UserMustChangePasswordAtNextLogin: ").Append(this.UserMustChangePasswordAtNextLogin).Append("\n");
            sb.Append("  WindowsUserId: ").Append(this.WindowsUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsUsersUserSaveV2Request);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsUsersUserSaveV2Request instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsUsersUserSaveV2Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsUsersUserSaveV2Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountLocked == input.AccountLocked ||
                    (this.AccountLocked != null &&
                    this.AccountLocked.Equals(input.AccountLocked))
                ) && 
                (
                    this.AllCultures == input.AllCultures ||
                    (this.AllCultures != null &&
                    this.AllCultures.Equals(input.AllCultures))
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.BusObPublicId == input.BusObPublicId ||
                    (this.BusObPublicId != null &&
                    this.BusObPublicId.Equals(input.BusObPublicId))
                ) && 
                (
                    this.BusObRecId == input.BusObRecId ||
                    (this.BusObRecId != null &&
                    this.BusObRecId.Equals(input.BusObRecId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.LdapRequired == input.LdapRequired ||
                    (this.LdapRequired != null &&
                    this.LdapRequired.Equals(input.LdapRequired))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.NextPasswordResetDate == input.NextPasswordResetDate ||
                    (this.NextPasswordResetDate != null &&
                    this.NextPasswordResetDate.Equals(input.NextPasswordResetDate))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PasswordNeverExpires == input.PasswordNeverExpires ||
                    (this.PasswordNeverExpires != null &&
                    this.PasswordNeverExpires.Equals(input.PasswordNeverExpires))
                ) && 
                (
                    this.SecurityGroupId == input.SecurityGroupId ||
                    (this.SecurityGroupId != null &&
                    this.SecurityGroupId.Equals(input.SecurityGroupId))
                ) && 
                (
                    this.SpecificCulture == input.SpecificCulture ||
                    (this.SpecificCulture != null &&
                    this.SpecificCulture.Equals(input.SpecificCulture))
                ) && 
                (
                    this.UserCannotChangePassword == input.UserCannotChangePassword ||
                    (this.UserCannotChangePassword != null &&
                    this.UserCannotChangePassword.Equals(input.UserCannotChangePassword))
                ) && 
                (
                    this.UserInfoFields == input.UserInfoFields ||
                    this.UserInfoFields != null &&
                    this.UserInfoFields.SequenceEqual(input.UserInfoFields)
                ) && 
                (
                    this.UserMustChangePasswordAtNextLogin == input.UserMustChangePasswordAtNextLogin ||
                    (this.UserMustChangePasswordAtNextLogin != null &&
                    this.UserMustChangePasswordAtNextLogin.Equals(input.UserMustChangePasswordAtNextLogin))
                ) && 
                (
                    this.WindowsUserId == input.WindowsUserId ||
                    (this.WindowsUserId != null &&
                    this.WindowsUserId.Equals(input.WindowsUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountLocked != null)
                    hashCode = hashCode * 59 + this.AccountLocked.GetHashCode();
                if (this.AllCultures != null)
                    hashCode = hashCode * 59 + this.AllCultures.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.BusObPublicId != null)
                    hashCode = hashCode * 59 + this.BusObPublicId.GetHashCode();
                if (this.BusObRecId != null)
                    hashCode = hashCode * 59 + this.BusObRecId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.LdapRequired != null)
                    hashCode = hashCode * 59 + this.LdapRequired.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.NextPasswordResetDate != null)
                    hashCode = hashCode * 59 + this.NextPasswordResetDate.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.PasswordNeverExpires != null)
                    hashCode = hashCode * 59 + this.PasswordNeverExpires.GetHashCode();
                if (this.SecurityGroupId != null)
                    hashCode = hashCode * 59 + this.SecurityGroupId.GetHashCode();
                if (this.SpecificCulture != null)
                    hashCode = hashCode * 59 + this.SpecificCulture.GetHashCode();
                if (this.UserCannotChangePassword != null)
                    hashCode = hashCode * 59 + this.UserCannotChangePassword.GetHashCode();
                if (this.UserInfoFields != null)
                    hashCode = hashCode * 59 + this.UserInfoFields.GetHashCode();
                if (this.UserMustChangePasswordAtNextLogin != null)
                    hashCode = hashCode * 59 + this.UserMustChangePasswordAtNextLogin.GetHashCode();
                if (this.WindowsUserId != null)
                    hashCode = hashCode * 59 + this.WindowsUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
