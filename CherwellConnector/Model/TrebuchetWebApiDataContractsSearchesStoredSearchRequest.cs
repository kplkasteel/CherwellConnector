/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsSearchesStoredSearchRequest
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsSearchesStoredSearchRequest :  IEquatable<TrebuchetWebApiDataContractsSearchesStoredSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsSearchesStoredSearchRequest" /> class.
        /// </summary>
        /// <param name="associationId">associationId.</param>
        /// <param name="associationName">associationName.</param>
        /// <param name="gridId">gridId.</param>
        /// <param name="includeSchema">includeSchema.</param>
        /// <param name="scope">scope.</param>
        /// <param name="scopeOwnerId">scopeOwnerId.</param>
        /// <param name="searchId">searchId.</param>
        /// <param name="searchName">searchName.</param>
        public TrebuchetWebApiDataContractsSearchesStoredSearchRequest(string associationId = default(string), string associationName = default(string), string gridId = default(string), bool? includeSchema = default(bool?), string scope = default(string), string scopeOwnerId = default(string), string searchId = default(string), string searchName = default(string))
        {
            this.AssociationId = associationId;
            this.AssociationName = associationName;
            this.GridId = gridId;
            this.IncludeSchema = includeSchema;
            this.Scope = scope;
            this.ScopeOwnerId = scopeOwnerId;
            this.SearchId = searchId;
            this.SearchName = searchName;
        }
        
        /// <summary>
        /// Gets or Sets AssociationId
        /// </summary>
        [DataMember(Name="associationId", EmitDefaultValue=false)]
        public string AssociationId { get; set; }

        /// <summary>
        /// Gets or Sets AssociationName
        /// </summary>
        [DataMember(Name="associationName", EmitDefaultValue=false)]
        public string AssociationName { get; set; }

        /// <summary>
        /// Gets or Sets GridId
        /// </summary>
        [DataMember(Name="gridId", EmitDefaultValue=false)]
        public string GridId { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSchema
        /// </summary>
        [DataMember(Name="includeSchema", EmitDefaultValue=false)]
        public bool? IncludeSchema { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ScopeOwnerId
        /// </summary>
        [DataMember(Name="scopeOwnerId", EmitDefaultValue=false)]
        public string ScopeOwnerId { get; set; }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name="searchId", EmitDefaultValue=false)]
        public string SearchId { get; set; }

        /// <summary>
        /// Gets or Sets SearchName
        /// </summary>
        [DataMember(Name="searchName", EmitDefaultValue=false)]
        public string SearchName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsSearchesStoredSearchRequest {\n");
            sb.Append("  AssociationId: ").Append(this.AssociationId).Append("\n");
            sb.Append("  AssociationName: ").Append(this.AssociationName).Append("\n");
            sb.Append("  GridId: ").Append(this.GridId).Append("\n");
            sb.Append("  IncludeSchema: ").Append(this.IncludeSchema).Append("\n");
            sb.Append("  Scope: ").Append(this.Scope).Append("\n");
            sb.Append("  ScopeOwnerId: ").Append(this.ScopeOwnerId).Append("\n");
            sb.Append("  SearchId: ").Append(this.SearchId).Append("\n");
            sb.Append("  SearchName: ").Append(this.SearchName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsSearchesStoredSearchRequest);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsSearchesStoredSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsSearchesStoredSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsSearchesStoredSearchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssociationId == input.AssociationId ||
                    (this.AssociationId != null &&
                    this.AssociationId.Equals(input.AssociationId))
                ) && 
                (
                    this.AssociationName == input.AssociationName ||
                    (this.AssociationName != null &&
                    this.AssociationName.Equals(input.AssociationName))
                ) && 
                (
                    this.GridId == input.GridId ||
                    (this.GridId != null &&
                    this.GridId.Equals(input.GridId))
                ) && 
                (
                    this.IncludeSchema == input.IncludeSchema ||
                    (this.IncludeSchema != null &&
                    this.IncludeSchema.Equals(input.IncludeSchema))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwnerId == input.ScopeOwnerId ||
                    (this.ScopeOwnerId != null &&
                    this.ScopeOwnerId.Equals(input.ScopeOwnerId))
                ) && 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                ) && 
                (
                    this.SearchName == input.SearchName ||
                    (this.SearchName != null &&
                    this.SearchName.Equals(input.SearchName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssociationId != null)
                    hashCode = hashCode * 59 + this.AssociationId.GetHashCode();
                if (this.AssociationName != null)
                    hashCode = hashCode * 59 + this.AssociationName.GetHashCode();
                if (this.GridId != null)
                    hashCode = hashCode * 59 + this.GridId.GetHashCode();
                if (this.IncludeSchema != null)
                    hashCode = hashCode * 59 + this.IncludeSchema.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwnerId != null)
                    hashCode = hashCode * 59 + this.ScopeOwnerId.GetHashCode();
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                if (this.SearchName != null)
                    hashCode = hashCode * 59 + this.SearchName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
