/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest :  IEquatable<TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest" /> class.
        /// </summary>
        /// <param name="busObId">busObId.</param>
        /// <param name="busObRecId">busObRecId.</param>
        /// <param name="historyNotes">historyNotes.</param>
        /// <param name="queueStandInKey">queueStandInKey.</param>
        public TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest(string busObId = default(string), string busObRecId = default(string), string historyNotes = default(string), string queueStandInKey = default(string))
        {
            this.BusObId = busObId;
            this.BusObRecId = busObRecId;
            this.HistoryNotes = historyNotes;
            this.QueueStandInKey = queueStandInKey;
        }
        
        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets BusObRecId
        /// </summary>
        [DataMember(Name="busObRecId", EmitDefaultValue=false)]
        public string BusObRecId { get; set; }

        /// <summary>
        /// Gets or Sets HistoryNotes
        /// </summary>
        [DataMember(Name="historyNotes", EmitDefaultValue=false)]
        public string HistoryNotes { get; set; }

        /// <summary>
        /// Gets or Sets QueueStandInKey
        /// </summary>
        [DataMember(Name="queueStandInKey", EmitDefaultValue=false)]
        public string QueueStandInKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest {\n");
            sb.Append("  BusObId: ").Append(this.BusObId).Append("\n");
            sb.Append("  BusObRecId: ").Append(this.BusObRecId).Append("\n");
            sb.Append("  HistoryNotes: ").Append(this.HistoryNotes).Append("\n");
            sb.Append("  QueueStandInKey: ").Append(this.QueueStandInKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsQueuesCheckOutQueueItemRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.BusObRecId == input.BusObRecId ||
                    (this.BusObRecId != null &&
                    this.BusObRecId.Equals(input.BusObRecId))
                ) && 
                (
                    this.HistoryNotes == input.HistoryNotes ||
                    (this.HistoryNotes != null &&
                    this.HistoryNotes.Equals(input.HistoryNotes))
                ) && 
                (
                    this.QueueStandInKey == input.QueueStandInKey ||
                    (this.QueueStandInKey != null &&
                    this.QueueStandInKey.Equals(input.QueueStandInKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.BusObRecId != null)
                    hashCode = hashCode * 59 + this.BusObRecId.GetHashCode();
                if (this.HistoryNotes != null)
                    hashCode = hashCode * 59 + this.HistoryNotes.GetHashCode();
                if (this.QueueStandInKey != null)
                    hashCode = hashCode * 59 + this.QueueStandInKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
