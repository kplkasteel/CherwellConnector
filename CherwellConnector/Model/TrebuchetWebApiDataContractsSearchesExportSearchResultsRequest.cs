/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest :  IEquatable<TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines ExportFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExportFormatEnum
        {
            
            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 1,
            
            /// <summary>
            /// Enum Excel for value: Excel
            /// </summary>
            [EnumMember(Value = "Excel")]
            Excel = 2,
            
            /// <summary>
            /// Enum Tab for value: Tab
            /// </summary>
            [EnumMember(Value = "Tab")]
            Tab = 3,
            
            /// <summary>
            /// Enum Word for value: Word
            /// </summary>
            [EnumMember(Value = "Word")]
            Word = 4,
            
            /// <summary>
            /// Enum CustomSeparator for value: CustomSeparator
            /// </summary>
            [EnumMember(Value = "CustomSeparator")]
            CustomSeparator = 5,
            
            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 6
        }

        /// <summary>
        /// Gets or Sets ExportFormat
        /// </summary>
        [DataMember(Name="exportFormat", EmitDefaultValue=false)]
        public ExportFormatEnum? ExportFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest" /> class.
        /// </summary>
        /// <param name="customSeparator">customSeparator.</param>
        /// <param name="exportFormat">exportFormat.</param>
        /// <param name="exportTitle">exportTitle.</param>
        /// <param name="association">association.</param>
        /// <param name="associationName">associationName.</param>
        /// <param name="busObId">busObId.</param>
        /// <param name="customGridDefId">customGridDefId.</param>
        /// <param name="dateTimeFormatting">dateTimeFormatting.</param>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="fields">fields.</param>
        /// <param name="filters">filters.</param>
        /// <param name="includeAllFields">includeAllFields.</param>
        /// <param name="includeSchema">includeSchema.</param>
        /// <param name="pageNumber">pageNumber.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="scope">scope.</param>
        /// <param name="scopeOwner">scopeOwner.</param>
        /// <param name="searchId">searchId.</param>
        /// <param name="searchName">searchName.</param>
        /// <param name="searchText">searchText.</param>
        /// <param name="sorting">sorting.</param>
        /// <param name="promptValues">promptValues.</param>
        public TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest(string customSeparator = default(string), ExportFormatEnum? exportFormat = default(ExportFormatEnum?), string exportTitle = default(string), string association = default(string), string associationName = default(string), string busObId = default(string), string customGridDefId = default(string), string dateTimeFormatting = default(string), string fieldId = default(string), List<string> fields = default(List<string>), List<TrebuchetWebApiDataContractsSearchesFilterInfo> filters = default(List<TrebuchetWebApiDataContractsSearchesFilterInfo>), bool? includeAllFields = default(bool?), bool? includeSchema = default(bool?), int? pageNumber = default(int?), int? pageSize = default(int?), string scope = default(string), string scopeOwner = default(string), string searchId = default(string), string searchName = default(string), string searchText = default(string), List<TrebuchetWebApiDataContractsSearchesSortInfo> sorting = default(List<TrebuchetWebApiDataContractsSearchesSortInfo>), List<TrebuchetWebApiDataContractsCorePromptValue> promptValues = default(List<TrebuchetWebApiDataContractsCorePromptValue>))
        {
            this.CustomSeparator = customSeparator;
            this.ExportFormat = exportFormat;
            this.ExportTitle = exportTitle;
            this.Association = association;
            this.AssociationName = associationName;
            this.BusObId = busObId;
            this.CustomGridDefId = customGridDefId;
            this.DateTimeFormatting = dateTimeFormatting;
            this.FieldId = fieldId;
            this.Fields = fields;
            this.Filters = filters;
            this.IncludeAllFields = includeAllFields;
            this.IncludeSchema = includeSchema;
            this.PageNumber = pageNumber;
            this.PageSize = pageSize;
            this.Scope = scope;
            this.ScopeOwner = scopeOwner;
            this.SearchId = searchId;
            this.SearchName = searchName;
            this.SearchText = searchText;
            this.Sorting = sorting;
            this.PromptValues = promptValues;
        }
        
        /// <summary>
        /// Gets or Sets CustomSeparator
        /// </summary>
        [DataMember(Name="customSeparator", EmitDefaultValue=false)]
        public string CustomSeparator { get; set; }


        /// <summary>
        /// Gets or Sets ExportTitle
        /// </summary>
        [DataMember(Name="exportTitle", EmitDefaultValue=false)]
        public string ExportTitle { get; set; }

        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public string Association { get; set; }

        /// <summary>
        /// Gets or Sets AssociationName
        /// </summary>
        [DataMember(Name="associationName", EmitDefaultValue=false)]
        public string AssociationName { get; set; }

        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets CustomGridDefId
        /// </summary>
        [DataMember(Name="customGridDefId", EmitDefaultValue=false)]
        public string CustomGridDefId { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeFormatting
        /// </summary>
        [DataMember(Name="dateTimeFormatting", EmitDefaultValue=false)]
        public string DateTimeFormatting { get; set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public string FieldId { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsSearchesFilterInfo> Filters { get; set; }

        /// <summary>
        /// Gets or Sets IncludeAllFields
        /// </summary>
        [DataMember(Name="includeAllFields", EmitDefaultValue=false)]
        public bool? IncludeAllFields { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSchema
        /// </summary>
        [DataMember(Name="includeSchema", EmitDefaultValue=false)]
        public bool? IncludeSchema { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ScopeOwner
        /// </summary>
        [DataMember(Name="scopeOwner", EmitDefaultValue=false)]
        public string ScopeOwner { get; set; }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name="searchId", EmitDefaultValue=false)]
        public string SearchId { get; set; }

        /// <summary>
        /// Gets or Sets SearchName
        /// </summary>
        [DataMember(Name="searchName", EmitDefaultValue=false)]
        public string SearchName { get; set; }

        /// <summary>
        /// Gets or Sets SearchText
        /// </summary>
        [DataMember(Name="searchText", EmitDefaultValue=false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Gets or Sets Sorting
        /// </summary>
        [DataMember(Name="sorting", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsSearchesSortInfo> Sorting { get; set; }

        /// <summary>
        /// Gets or Sets PromptValues
        /// </summary>
        [DataMember(Name="promptValues", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsCorePromptValue> PromptValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest {\n");
            sb.Append("  CustomSeparator: ").Append(this.CustomSeparator).Append("\n");
            sb.Append("  ExportFormat: ").Append(this.ExportFormat).Append("\n");
            sb.Append("  ExportTitle: ").Append(this.ExportTitle).Append("\n");
            sb.Append("  Association: ").Append(this.Association).Append("\n");
            sb.Append("  AssociationName: ").Append(this.AssociationName).Append("\n");
            sb.Append("  BusObId: ").Append(this.BusObId).Append("\n");
            sb.Append("  CustomGridDefId: ").Append(this.CustomGridDefId).Append("\n");
            sb.Append("  DateTimeFormatting: ").Append(this.DateTimeFormatting).Append("\n");
            sb.Append("  FieldId: ").Append(this.FieldId).Append("\n");
            sb.Append("  Fields: ").Append(this.Fields).Append("\n");
            sb.Append("  Filters: ").Append(this.Filters).Append("\n");
            sb.Append("  IncludeAllFields: ").Append(this.IncludeAllFields).Append("\n");
            sb.Append("  IncludeSchema: ").Append(this.IncludeSchema).Append("\n");
            sb.Append("  PageNumber: ").Append(this.PageNumber).Append("\n");
            sb.Append("  PageSize: ").Append(this.PageSize).Append("\n");
            sb.Append("  Scope: ").Append(this.Scope).Append("\n");
            sb.Append("  ScopeOwner: ").Append(this.ScopeOwner).Append("\n");
            sb.Append("  SearchId: ").Append(this.SearchId).Append("\n");
            sb.Append("  SearchName: ").Append(this.SearchName).Append("\n");
            sb.Append("  SearchText: ").Append(this.SearchText).Append("\n");
            sb.Append("  Sorting: ").Append(this.Sorting).Append("\n");
            sb.Append("  PromptValues: ").Append(this.PromptValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsSearchesExportSearchResultsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomSeparator == input.CustomSeparator ||
                    (this.CustomSeparator != null &&
                    this.CustomSeparator.Equals(input.CustomSeparator))
                ) && 
                (
                    this.ExportFormat == input.ExportFormat ||
                    (this.ExportFormat != null &&
                    this.ExportFormat.Equals(input.ExportFormat))
                ) && 
                (
                    this.ExportTitle == input.ExportTitle ||
                    (this.ExportTitle != null &&
                    this.ExportTitle.Equals(input.ExportTitle))
                ) && 
                (
                    this.Association == input.Association ||
                    (this.Association != null &&
                    this.Association.Equals(input.Association))
                ) && 
                (
                    this.AssociationName == input.AssociationName ||
                    (this.AssociationName != null &&
                    this.AssociationName.Equals(input.AssociationName))
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.CustomGridDefId == input.CustomGridDefId ||
                    (this.CustomGridDefId != null &&
                    this.CustomGridDefId.Equals(input.CustomGridDefId))
                ) && 
                (
                    this.DateTimeFormatting == input.DateTimeFormatting ||
                    (this.DateTimeFormatting != null &&
                    this.DateTimeFormatting.Equals(input.DateTimeFormatting))
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.IncludeAllFields == input.IncludeAllFields ||
                    (this.IncludeAllFields != null &&
                    this.IncludeAllFields.Equals(input.IncludeAllFields))
                ) && 
                (
                    this.IncludeSchema == input.IncludeSchema ||
                    (this.IncludeSchema != null &&
                    this.IncludeSchema.Equals(input.IncludeSchema))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwner == input.ScopeOwner ||
                    (this.ScopeOwner != null &&
                    this.ScopeOwner.Equals(input.ScopeOwner))
                ) && 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                ) && 
                (
                    this.SearchName == input.SearchName ||
                    (this.SearchName != null &&
                    this.SearchName.Equals(input.SearchName))
                ) && 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                ) && 
                (
                    this.Sorting == input.Sorting ||
                    this.Sorting != null &&
                    this.Sorting.SequenceEqual(input.Sorting)
                ) && 
                (
                    this.PromptValues == input.PromptValues ||
                    this.PromptValues != null &&
                    this.PromptValues.SequenceEqual(input.PromptValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomSeparator != null)
                    hashCode = hashCode * 59 + this.CustomSeparator.GetHashCode();
                if (this.ExportFormat != null)
                    hashCode = hashCode * 59 + this.ExportFormat.GetHashCode();
                if (this.ExportTitle != null)
                    hashCode = hashCode * 59 + this.ExportTitle.GetHashCode();
                if (this.Association != null)
                    hashCode = hashCode * 59 + this.Association.GetHashCode();
                if (this.AssociationName != null)
                    hashCode = hashCode * 59 + this.AssociationName.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.CustomGridDefId != null)
                    hashCode = hashCode * 59 + this.CustomGridDefId.GetHashCode();
                if (this.DateTimeFormatting != null)
                    hashCode = hashCode * 59 + this.DateTimeFormatting.GetHashCode();
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.IncludeAllFields != null)
                    hashCode = hashCode * 59 + this.IncludeAllFields.GetHashCode();
                if (this.IncludeSchema != null)
                    hashCode = hashCode * 59 + this.IncludeSchema.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwner != null)
                    hashCode = hashCode * 59 + this.ScopeOwner.GetHashCode();
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                if (this.SearchName != null)
                    hashCode = hashCode * 59 + this.SearchName.GetHashCode();
                if (this.SearchText != null)
                    hashCode = hashCode * 59 + this.SearchText.GetHashCode();
                if (this.Sorting != null)
                    hashCode = hashCode * 59 + this.Sorting.GetHashCode();
                if (this.PromptValues != null)
                    hashCode = hashCode * 59 + this.PromptValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
