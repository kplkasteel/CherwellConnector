/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest :  IEquatable<TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest" /> class.
        /// </summary>
        /// <param name="ascending">ascending.</param>
        /// <param name="isBusObTarget">isBusObTarget.</param>
        /// <param name="nonFinalState">nonFinalState.</param>
        /// <param name="searchAnyWords">searchAnyWords.</param>
        /// <param name="searchAttachments">searchAttachments.</param>
        /// <param name="searchRelated">searchRelated.</param>
        /// <param name="searchText">searchText.</param>
        /// <param name="selectedChangedLimit">selectedChangedLimit.</param>
        /// <param name="selectedSortByFieldId">selectedSortByFieldId.</param>
        /// <param name="sortByRelevance">sortByRelevance.</param>
        /// <param name="specificSearchTargetId">specificSearchTargetId.</param>
        /// <param name="useSortBy">useSortBy.</param>
        public TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest(bool? ascending = default(bool?), bool? isBusObTarget = default(bool?), bool? nonFinalState = default(bool?), bool? searchAnyWords = default(bool?), bool? searchAttachments = default(bool?), bool? searchRelated = default(bool?), string searchText = default(string), TrebuchetWebApiDataContractsSearchesChangedLimit selectedChangedLimit = default(TrebuchetWebApiDataContractsSearchesChangedLimit), string selectedSortByFieldId = default(string), bool? sortByRelevance = default(bool?), string specificSearchTargetId = default(string), bool? useSortBy = default(bool?))
        {
            this.Ascending = ascending;
            this.IsBusObTarget = isBusObTarget;
            this.NonFinalState = nonFinalState;
            this.SearchAnyWords = searchAnyWords;
            this.SearchAttachments = searchAttachments;
            this.SearchRelated = searchRelated;
            this.SearchText = searchText;
            this.SelectedChangedLimit = selectedChangedLimit;
            this.SelectedSortByFieldId = selectedSortByFieldId;
            this.SortByRelevance = sortByRelevance;
            this.SpecificSearchTargetId = specificSearchTargetId;
            this.UseSortBy = useSortBy;
        }
        
        /// <summary>
        /// Gets or Sets Ascending
        /// </summary>
        [DataMember(Name="ascending", EmitDefaultValue=false)]
        public bool? Ascending { get; set; }

        /// <summary>
        /// Gets or Sets IsBusObTarget
        /// </summary>
        [DataMember(Name="isBusObTarget", EmitDefaultValue=false)]
        public bool? IsBusObTarget { get; set; }

        /// <summary>
        /// Gets or Sets NonFinalState
        /// </summary>
        [DataMember(Name="nonFinalState", EmitDefaultValue=false)]
        public bool? NonFinalState { get; set; }

        /// <summary>
        /// Gets or Sets SearchAnyWords
        /// </summary>
        [DataMember(Name="searchAnyWords", EmitDefaultValue=false)]
        public bool? SearchAnyWords { get; set; }

        /// <summary>
        /// Gets or Sets SearchAttachments
        /// </summary>
        [DataMember(Name="searchAttachments", EmitDefaultValue=false)]
        public bool? SearchAttachments { get; set; }

        /// <summary>
        /// Gets or Sets SearchRelated
        /// </summary>
        [DataMember(Name="searchRelated", EmitDefaultValue=false)]
        public bool? SearchRelated { get; set; }

        /// <summary>
        /// Gets or Sets SearchText
        /// </summary>
        [DataMember(Name="searchText", EmitDefaultValue=false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Gets or Sets SelectedChangedLimit
        /// </summary>
        [DataMember(Name="selectedChangedLimit", EmitDefaultValue=false)]
        public TrebuchetWebApiDataContractsSearchesChangedLimit SelectedChangedLimit { get; set; }

        /// <summary>
        /// Gets or Sets SelectedSortByFieldId
        /// </summary>
        [DataMember(Name="selectedSortByFieldId", EmitDefaultValue=false)]
        public string SelectedSortByFieldId { get; set; }

        /// <summary>
        /// Gets or Sets SortByRelevance
        /// </summary>
        [DataMember(Name="sortByRelevance", EmitDefaultValue=false)]
        public bool? SortByRelevance { get; set; }

        /// <summary>
        /// Gets or Sets SpecificSearchTargetId
        /// </summary>
        [DataMember(Name="specificSearchTargetId", EmitDefaultValue=false)]
        public string SpecificSearchTargetId { get; set; }

        /// <summary>
        /// Gets or Sets UseSortBy
        /// </summary>
        [DataMember(Name="useSortBy", EmitDefaultValue=false)]
        public bool? UseSortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest {\n");
            sb.Append("  Ascending: ").Append(this.Ascending).Append("\n");
            sb.Append("  IsBusObTarget: ").Append(this.IsBusObTarget).Append("\n");
            sb.Append("  NonFinalState: ").Append(this.NonFinalState).Append("\n");
            sb.Append("  SearchAnyWords: ").Append(this.SearchAnyWords).Append("\n");
            sb.Append("  SearchAttachments: ").Append(this.SearchAttachments).Append("\n");
            sb.Append("  SearchRelated: ").Append(this.SearchRelated).Append("\n");
            sb.Append("  SearchText: ").Append(this.SearchText).Append("\n");
            sb.Append("  SelectedChangedLimit: ").Append(this.SelectedChangedLimit).Append("\n");
            sb.Append("  SelectedSortByFieldId: ").Append(this.SelectedSortByFieldId).Append("\n");
            sb.Append("  SortByRelevance: ").Append(this.SortByRelevance).Append("\n");
            sb.Append("  SpecificSearchTargetId: ").Append(this.SpecificSearchTargetId).Append("\n");
            sb.Append("  UseSortBy: ").Append(this.UseSortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsSearchesQuickSearchSpecificRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ascending == input.Ascending ||
                    (this.Ascending != null &&
                    this.Ascending.Equals(input.Ascending))
                ) && 
                (
                    this.IsBusObTarget == input.IsBusObTarget ||
                    (this.IsBusObTarget != null &&
                    this.IsBusObTarget.Equals(input.IsBusObTarget))
                ) && 
                (
                    this.NonFinalState == input.NonFinalState ||
                    (this.NonFinalState != null &&
                    this.NonFinalState.Equals(input.NonFinalState))
                ) && 
                (
                    this.SearchAnyWords == input.SearchAnyWords ||
                    (this.SearchAnyWords != null &&
                    this.SearchAnyWords.Equals(input.SearchAnyWords))
                ) && 
                (
                    this.SearchAttachments == input.SearchAttachments ||
                    (this.SearchAttachments != null &&
                    this.SearchAttachments.Equals(input.SearchAttachments))
                ) && 
                (
                    this.SearchRelated == input.SearchRelated ||
                    (this.SearchRelated != null &&
                    this.SearchRelated.Equals(input.SearchRelated))
                ) && 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                ) && 
                (
                    this.SelectedChangedLimit == input.SelectedChangedLimit ||
                    (this.SelectedChangedLimit != null &&
                    this.SelectedChangedLimit.Equals(input.SelectedChangedLimit))
                ) && 
                (
                    this.SelectedSortByFieldId == input.SelectedSortByFieldId ||
                    (this.SelectedSortByFieldId != null &&
                    this.SelectedSortByFieldId.Equals(input.SelectedSortByFieldId))
                ) && 
                (
                    this.SortByRelevance == input.SortByRelevance ||
                    (this.SortByRelevance != null &&
                    this.SortByRelevance.Equals(input.SortByRelevance))
                ) && 
                (
                    this.SpecificSearchTargetId == input.SpecificSearchTargetId ||
                    (this.SpecificSearchTargetId != null &&
                    this.SpecificSearchTargetId.Equals(input.SpecificSearchTargetId))
                ) && 
                (
                    this.UseSortBy == input.UseSortBy ||
                    (this.UseSortBy != null &&
                    this.UseSortBy.Equals(input.UseSortBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ascending != null)
                    hashCode = hashCode * 59 + this.Ascending.GetHashCode();
                if (this.IsBusObTarget != null)
                    hashCode = hashCode * 59 + this.IsBusObTarget.GetHashCode();
                if (this.NonFinalState != null)
                    hashCode = hashCode * 59 + this.NonFinalState.GetHashCode();
                if (this.SearchAnyWords != null)
                    hashCode = hashCode * 59 + this.SearchAnyWords.GetHashCode();
                if (this.SearchAttachments != null)
                    hashCode = hashCode * 59 + this.SearchAttachments.GetHashCode();
                if (this.SearchRelated != null)
                    hashCode = hashCode * 59 + this.SearchRelated.GetHashCode();
                if (this.SearchText != null)
                    hashCode = hashCode * 59 + this.SearchText.GetHashCode();
                if (this.SelectedChangedLimit != null)
                    hashCode = hashCode * 59 + this.SelectedChangedLimit.GetHashCode();
                if (this.SelectedSortByFieldId != null)
                    hashCode = hashCode * 59 + this.SelectedSortByFieldId.GetHashCode();
                if (this.SortByRelevance != null)
                    hashCode = hashCode * 59 + this.SortByRelevance.GetHashCode();
                if (this.SpecificSearchTargetId != null)
                    hashCode = hashCode * 59 + this.SpecificSearchTargetId.GetHashCode();
                if (this.UseSortBy != null)
                    hashCode = hashCode * 59 + this.UseSortBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
