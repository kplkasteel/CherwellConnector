/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsCoreManagerFolder
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsCoreManagerFolder :  IEquatable<TrebuchetWebApiDataContractsCoreManagerFolder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsCoreManagerFolder" /> class.
        /// </summary>
        /// <param name="association">association.</param>
        /// <param name="childFolders">childFolders.</param>
        /// <param name="childItems">childItems.</param>
        /// <param name="id">id.</param>
        /// <param name="links">links.</param>
        /// <param name="localizedScopeName">localizedScopeName.</param>
        /// <param name="name">name.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="scope">scope.</param>
        /// <param name="scopeOwner">scopeOwner.</param>
        public TrebuchetWebApiDataContractsCoreManagerFolder(string association = default(string), List<TrebuchetWebApiDataContractsCoreManagerFolder> childFolders = default(List<TrebuchetWebApiDataContractsCoreManagerFolder>), List<TrebuchetWebApiDataContractsCoreManagerItem> childItems = default(List<TrebuchetWebApiDataContractsCoreManagerItem>), string id = default(string), List<TrebuchetWebApiDataContractsCoreLink> links = default(List<TrebuchetWebApiDataContractsCoreLink>), string localizedScopeName = default(string), string name = default(string), string parentId = default(string), string scope = default(string), string scopeOwner = default(string))
        {
            this.Association = association;
            this.ChildFolders = childFolders;
            this.ChildItems = childItems;
            this.Id = id;
            this.Links = links;
            this.LocalizedScopeName = localizedScopeName;
            this.Name = name;
            this.ParentId = parentId;
            this.Scope = scope;
            this.ScopeOwner = scopeOwner;
        }
        
        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public string Association { get; set; }

        /// <summary>
        /// Gets or Sets ChildFolders
        /// </summary>
        [DataMember(Name="childFolders", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsCoreManagerFolder> ChildFolders { get; set; }

        /// <summary>
        /// Gets or Sets ChildItems
        /// </summary>
        [DataMember(Name="childItems", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsCoreManagerItem> ChildItems { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsCoreLink> Links { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedScopeName
        /// </summary>
        [DataMember(Name="localizedScopeName", EmitDefaultValue=false)]
        public string LocalizedScopeName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ScopeOwner
        /// </summary>
        [DataMember(Name="scopeOwner", EmitDefaultValue=false)]
        public string ScopeOwner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsCoreManagerFolder {\n");
            sb.Append("  Association: ").Append(this.Association).Append("\n");
            sb.Append("  ChildFolders: ").Append(this.ChildFolders).Append("\n");
            sb.Append("  ChildItems: ").Append(this.ChildItems).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Links: ").Append(this.Links).Append("\n");
            sb.Append("  LocalizedScopeName: ").Append(this.LocalizedScopeName).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  ParentId: ").Append(this.ParentId).Append("\n");
            sb.Append("  Scope: ").Append(this.Scope).Append("\n");
            sb.Append("  ScopeOwner: ").Append(this.ScopeOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsCoreManagerFolder);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsCoreManagerFolder instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsCoreManagerFolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsCoreManagerFolder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Association == input.Association ||
                    (this.Association != null &&
                    this.Association.Equals(input.Association))
                ) && 
                (
                    this.ChildFolders == input.ChildFolders ||
                    this.ChildFolders != null &&
                    this.ChildFolders.SequenceEqual(input.ChildFolders)
                ) && 
                (
                    this.ChildItems == input.ChildItems ||
                    this.ChildItems != null &&
                    this.ChildItems.SequenceEqual(input.ChildItems)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.LocalizedScopeName == input.LocalizedScopeName ||
                    (this.LocalizedScopeName != null &&
                    this.LocalizedScopeName.Equals(input.LocalizedScopeName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwner == input.ScopeOwner ||
                    (this.ScopeOwner != null &&
                    this.ScopeOwner.Equals(input.ScopeOwner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Association != null)
                    hashCode = hashCode * 59 + this.Association.GetHashCode();
                if (this.ChildFolders != null)
                    hashCode = hashCode * 59 + this.ChildFolders.GetHashCode();
                if (this.ChildItems != null)
                    hashCode = hashCode * 59 + this.ChildItems.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.LocalizedScopeName != null)
                    hashCode = hashCode * 59 + this.LocalizedScopeName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwner != null)
                    hashCode = hashCode * 59 + this.ScopeOwner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
