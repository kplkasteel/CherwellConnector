/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// TrebuchetWebApiDataContractsCoreAction
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsCoreAction :  IEquatable<TrebuchetWebApiDataContractsCoreAction>, IValidatableObject
    {
        /// <summary>
        /// Defines ActionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum OneStep for value: OneStep
            /// </summary>
            [EnumMember(Value = "OneStep")]
            OneStep = 2,
            
            /// <summary>
            /// Enum Command for value: Command
            /// </summary>
            [EnumMember(Value = "Command")]
            Command = 3,
            
            /// <summary>
            /// Enum BuiltIn for value: BuiltIn
            /// </summary>
            [EnumMember(Value = "BuiltIn")]
            BuiltIn = 4,
            
            /// <summary>
            /// Enum Category for value: Category
            /// </summary>
            [EnumMember(Value = "Category")]
            Category = 5,
            
            /// <summary>
            /// Enum SearchGrp for value: SearchGrp
            /// </summary>
            [EnumMember(Value = "SearchGrp")]
            SearchGrp = 6,
            
            /// <summary>
            /// Enum Report for value: Report
            /// </summary>
            [EnumMember(Value = "Report")]
            Report = 7,
            
            /// <summary>
            /// Enum Dashboard for value: Dashboard
            /// </summary>
            [EnumMember(Value = "Dashboard")]
            Dashboard = 8,
            
            /// <summary>
            /// Enum Calendar for value: Calendar
            /// </summary>
            [EnumMember(Value = "Calendar")]
            Calendar = 9,
            
            /// <summary>
            /// Enum Visualization for value: Visualization
            /// </summary>
            [EnumMember(Value = "Visualization")]
            Visualization = 10,
            
            /// <summary>
            /// Enum Group for value: Group
            /// </summary>
            [EnumMember(Value = "Group")]
            Group = 11,
            
            /// <summary>
            /// Enum Page for value: Page
            /// </summary>
            [EnumMember(Value = "Page")]
            Page = 12,
            
            /// <summary>
            /// Enum DocRepository for value: DocRepository
            /// </summary>
            [EnumMember(Value = "DocRepository")]
            DocRepository = 13,
            
            /// <summary>
            /// Enum PortalCommand for value: PortalCommand
            /// </summary>
            [EnumMember(Value = "PortalCommand")]
            PortalCommand = 14,
            
            /// <summary>
            /// Enum ActionCatalog for value: ActionCatalog
            /// </summary>
            [EnumMember(Value = "ActionCatalog")]
            ActionCatalog = 15,
            
            /// <summary>
            /// Enum OneStepForRecord for value: OneStepForRecord
            /// </summary>
            [EnumMember(Value = "OneStepForRecord")]
            OneStepForRecord = 16
        }

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name="actionType", EmitDefaultValue=false)]
        public ActionTypeEnum? ActionType { get; set; }
        /// <summary>
        /// Defines LoginEnabledMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoginEnabledModeEnum
        {
            
            /// <summary>
            /// Enum Anonymous for value: Anonymous
            /// </summary>
            [EnumMember(Value = "Anonymous")]
            Anonymous = 1,
            
            /// <summary>
            /// Enum LoggedIn for value: LoggedIn
            /// </summary>
            [EnumMember(Value = "LoggedIn")]
            LoggedIn = 2,
            
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3
        }

        /// <summary>
        /// Gets or Sets LoginEnabledMode
        /// </summary>
        [DataMember(Name="loginEnabledMode", EmitDefaultValue=false)]
        public LoginEnabledModeEnum? LoginEnabledMode { get; set; }
        /// <summary>
        /// Defines LoginVisibilityMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoginVisibilityModeEnum
        {
            
            /// <summary>
            /// Enum Anonymous for value: Anonymous
            /// </summary>
            [EnumMember(Value = "Anonymous")]
            Anonymous = 1,
            
            /// <summary>
            /// Enum LoggedIn for value: LoggedIn
            /// </summary>
            [EnumMember(Value = "LoggedIn")]
            LoggedIn = 2,
            
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3
        }

        /// <summary>
        /// Gets or Sets LoginVisibilityMode
        /// </summary>
        [DataMember(Name="loginVisibilityMode", EmitDefaultValue=false)]
        public LoginVisibilityModeEnum? LoginVisibilityMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsCoreAction" /> class.
        /// </summary>
        /// <param name="actionCommand">actionCommand.</param>
        /// <param name="actionType">actionType.</param>
        /// <param name="alwaysTextAndImage">alwaysTextAndImage.</param>
        /// <param name="beginGroup">beginGroup.</param>
        /// <param name="childActions">childActions.</param>
        /// <param name="dependencies">dependencies.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="galleryImage">galleryImage.</param>
        /// <param name="helpText">helpText.</param>
        /// <param name="loginEnabledMode">loginEnabledMode.</param>
        /// <param name="loginVisibilityMode">loginVisibilityMode.</param>
        /// <param name="name">name.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="visible">visible.</param>
        public TrebuchetWebApiDataContractsCoreAction(string actionCommand = default(string), ActionTypeEnum? actionType = default(ActionTypeEnum?), bool? alwaysTextAndImage = default(bool?), bool? beginGroup = default(bool?), List<TrebuchetWebApiDataContractsCoreAction> childActions = default(List<TrebuchetWebApiDataContractsCoreAction>), List<string> dependencies = default(List<string>), string displayText = default(string), bool? enabled = default(bool?), string galleryImage = default(string), string helpText = default(string), LoginEnabledModeEnum? loginEnabledMode = default(LoginEnabledModeEnum?), LoginVisibilityModeEnum? loginVisibilityMode = default(LoginVisibilityModeEnum?), string name = default(string), Dictionary<string, string> parameters = default(Dictionary<string, string>), bool? visible = default(bool?))
        {
            this.ActionCommand = actionCommand;
            this.ActionType = actionType;
            this.AlwaysTextAndImage = alwaysTextAndImage;
            this.BeginGroup = beginGroup;
            this.ChildActions = childActions;
            this.Dependencies = dependencies;
            this.DisplayText = displayText;
            this.Enabled = enabled;
            this.GalleryImage = galleryImage;
            this.HelpText = helpText;
            this.LoginEnabledMode = loginEnabledMode;
            this.LoginVisibilityMode = loginVisibilityMode;
            this.Name = name;
            this.Parameters = parameters;
            this.Visible = visible;
        }
        
        /// <summary>
        /// Gets or Sets ActionCommand
        /// </summary>
        [DataMember(Name="actionCommand", EmitDefaultValue=false)]
        public string ActionCommand { get; set; }


        /// <summary>
        /// Gets or Sets AlwaysTextAndImage
        /// </summary>
        [DataMember(Name="alwaysTextAndImage", EmitDefaultValue=false)]
        public bool? AlwaysTextAndImage { get; set; }

        /// <summary>
        /// Gets or Sets BeginGroup
        /// </summary>
        [DataMember(Name="beginGroup", EmitDefaultValue=false)]
        public bool? BeginGroup { get; set; }

        /// <summary>
        /// Gets or Sets ChildActions
        /// </summary>
        [DataMember(Name="childActions", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsCoreAction> ChildActions { get; set; }

        /// <summary>
        /// Gets or Sets Dependencies
        /// </summary>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public List<string> Dependencies { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=false)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets GalleryImage
        /// </summary>
        [DataMember(Name="galleryImage", EmitDefaultValue=false)]
        public string GalleryImage { get; set; }

        /// <summary>
        /// Gets or Sets HelpText
        /// </summary>
        [DataMember(Name="helpText", EmitDefaultValue=false)]
        public string HelpText { get; set; }



        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsCoreAction {\n");
            sb.Append("  ActionCommand: ").Append(this.ActionCommand).Append("\n");
            sb.Append("  ActionType: ").Append(this.ActionType).Append("\n");
            sb.Append("  AlwaysTextAndImage: ").Append(this.AlwaysTextAndImage).Append("\n");
            sb.Append("  BeginGroup: ").Append(this.BeginGroup).Append("\n");
            sb.Append("  ChildActions: ").Append(this.ChildActions).Append("\n");
            sb.Append("  Dependencies: ").Append(this.Dependencies).Append("\n");
            sb.Append("  DisplayText: ").Append(this.DisplayText).Append("\n");
            sb.Append("  Enabled: ").Append(this.Enabled).Append("\n");
            sb.Append("  GalleryImage: ").Append(this.GalleryImage).Append("\n");
            sb.Append("  HelpText: ").Append(this.HelpText).Append("\n");
            sb.Append("  LoginEnabledMode: ").Append(this.LoginEnabledMode).Append("\n");
            sb.Append("  LoginVisibilityMode: ").Append(this.LoginVisibilityMode).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Parameters: ").Append(this.Parameters).Append("\n");
            sb.Append("  Visible: ").Append(this.Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsCoreAction);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsCoreAction instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsCoreAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsCoreAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionCommand == input.ActionCommand ||
                    (this.ActionCommand != null &&
                    this.ActionCommand.Equals(input.ActionCommand))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.AlwaysTextAndImage == input.AlwaysTextAndImage ||
                    (this.AlwaysTextAndImage != null &&
                    this.AlwaysTextAndImage.Equals(input.AlwaysTextAndImage))
                ) && 
                (
                    this.BeginGroup == input.BeginGroup ||
                    (this.BeginGroup != null &&
                    this.BeginGroup.Equals(input.BeginGroup))
                ) && 
                (
                    this.ChildActions == input.ChildActions ||
                    this.ChildActions != null &&
                    this.ChildActions.SequenceEqual(input.ChildActions)
                ) && 
                (
                    this.Dependencies == input.Dependencies ||
                    this.Dependencies != null &&
                    this.Dependencies.SequenceEqual(input.Dependencies)
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.GalleryImage == input.GalleryImage ||
                    (this.GalleryImage != null &&
                    this.GalleryImage.Equals(input.GalleryImage))
                ) && 
                (
                    this.HelpText == input.HelpText ||
                    (this.HelpText != null &&
                    this.HelpText.Equals(input.HelpText))
                ) && 
                (
                    this.LoginEnabledMode == input.LoginEnabledMode ||
                    (this.LoginEnabledMode != null &&
                    this.LoginEnabledMode.Equals(input.LoginEnabledMode))
                ) && 
                (
                    this.LoginVisibilityMode == input.LoginVisibilityMode ||
                    (this.LoginVisibilityMode != null &&
                    this.LoginVisibilityMode.Equals(input.LoginVisibilityMode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Visible == input.Visible ||
                    (this.Visible != null &&
                    this.Visible.Equals(input.Visible))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionCommand != null)
                    hashCode = hashCode * 59 + this.ActionCommand.GetHashCode();
                if (this.ActionType != null)
                    hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.AlwaysTextAndImage != null)
                    hashCode = hashCode * 59 + this.AlwaysTextAndImage.GetHashCode();
                if (this.BeginGroup != null)
                    hashCode = hashCode * 59 + this.BeginGroup.GetHashCode();
                if (this.ChildActions != null)
                    hashCode = hashCode * 59 + this.ChildActions.GetHashCode();
                if (this.Dependencies != null)
                    hashCode = hashCode * 59 + this.Dependencies.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.GalleryImage != null)
                    hashCode = hashCode * 59 + this.GalleryImage.GetHashCode();
                if (this.HelpText != null)
                    hashCode = hashCode * 59 + this.HelpText.GetHashCode();
                if (this.LoginEnabledMode != null)
                    hashCode = hashCode * 59 + this.LoginEnabledMode.GetHashCode();
                if (this.LoginVisibilityMode != null)
                    hashCode = hashCode * 59 + this.LoginVisibilityMode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Visible != null)
                    hashCode = hashCode * 59 + this.Visible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
