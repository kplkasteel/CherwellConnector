/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition :  IEquatable<TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="id">id.</param>
        /// <param name="isAvailable">isAvailable.</param>
        /// <param name="criteria">criteria.</param>
        public TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition(string name = default(string), string id = default(string), bool? isAvailable = default(bool?), List<string> criteria = default(List<string>))
        {
            this.Name = name;
            this.Id = id;
            this.IsAvailable = isAvailable;
            this.Criteria = criteria;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsAvailable
        /// </summary>
        [DataMember(Name="isAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets Criteria
        /// </summary>
        [DataMember(Name="criteria", EmitDefaultValue=false)]
        public List<string> Criteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition {\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  IsAvailable: ").Append(this.IsAvailable).Append("\n");
            sb.Append("  Criteria: ").Append(this.Criteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsLifecycleGetTransitionOptionsResponseTransition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsAvailable == input.IsAvailable ||
                    (this.IsAvailable != null &&
                    this.IsAvailable.Equals(input.IsAvailable))
                ) && 
                (
                    this.Criteria == input.Criteria ||
                    this.Criteria != null &&
                    this.Criteria.SequenceEqual(input.Criteria)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsAvailable != null)
                    hashCode = hashCode * 59 + this.IsAvailable.GetHashCode();
                if (this.Criteria != null)
                    hashCode = hashCode * 59 + this.Criteria.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
