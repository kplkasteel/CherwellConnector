/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// TrebuchetWebApiDataContractsCorePrompt
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsCorePrompt :  IEquatable<TrebuchetWebApiDataContractsCorePrompt>, IValidatableObject
    {
        /// <summary>
        /// Defines ListDisplayOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListDisplayOptionEnum
        {
            
            /// <summary>
            /// Enum Auto for value: Auto
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto = 1,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 2,
            
            /// <summary>
            /// Enum Combo for value: Combo
            /// </summary>
            [EnumMember(Value = "Combo")]
            Combo = 3,
            
            /// <summary>
            /// Enum GridList for value: GridList
            /// </summary>
            [EnumMember(Value = "GridList")]
            GridList = 4,
            
            /// <summary>
            /// Enum SimpleList for value: SimpleList
            /// </summary>
            [EnumMember(Value = "SimpleList")]
            SimpleList = 5,
            
            /// <summary>
            /// Enum PromptSimpleGrid for value: PromptSimpleGrid
            /// </summary>
            [EnumMember(Value = "PromptSimpleGrid")]
            PromptSimpleGrid = 6
        }

        /// <summary>
        /// Gets or Sets ListDisplayOption
        /// </summary>
        [DataMember(Name="listDisplayOption", EmitDefaultValue=false)]
        public ListDisplayOptionEnum? ListDisplayOption { get; set; }
        /// <summary>
        /// Defines PromptType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PromptTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 2,
            
            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 3,
            
            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 4,
            
            /// <summary>
            /// Enum Logical for value: Logical
            /// </summary>
            [EnumMember(Value = "Logical")]
            Logical = 5,
            
            /// <summary>
            /// Enum Binary for value: Binary
            /// </summary>
            [EnumMember(Value = "Binary")]
            Binary = 6,
            
            /// <summary>
            /// Enum DateOnly for value: DateOnly
            /// </summary>
            [EnumMember(Value = "DateOnly")]
            DateOnly = 7,
            
            /// <summary>
            /// Enum TimeOnly for value: TimeOnly
            /// </summary>
            [EnumMember(Value = "TimeOnly")]
            TimeOnly = 8,
            
            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 9,
            
            /// <summary>
            /// Enum JsonArray for value: JsonArray
            /// </summary>
            [EnumMember(Value = "JsonArray")]
            JsonArray = 10,
            
            /// <summary>
            /// Enum Xml for value: Xml
            /// </summary>
            [EnumMember(Value = "Xml")]
            Xml = 11,
            
            /// <summary>
            /// Enum XmlCollection for value: XmlCollection
            /// </summary>
            [EnumMember(Value = "XmlCollection")]
            XmlCollection = 12,
            
            /// <summary>
            /// Enum TimeValue for value: TimeValue
            /// </summary>
            [EnumMember(Value = "TimeValue")]
            TimeValue = 13
        }

        /// <summary>
        /// Gets or Sets PromptType
        /// </summary>
        [DataMember(Name="promptType", EmitDefaultValue=false)]
        public PromptTypeEnum? PromptType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsCorePrompt" /> class.
        /// </summary>
        /// <param name="allowValuesOnly">allowValuesOnly.</param>
        /// <param name="busObId">busObId.</param>
        /// <param name="collectionStoreEntireRow">collectionStoreEntireRow.</param>
        /// <param name="collectionValueField">collectionValueField.</param>
        /// <param name="constraintXml">constraintXml.</param>
        /// <param name="contents">contents.</param>
        /// <param name="_default">_default.</param>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="isDateRange">isDateRange.</param>
        /// <param name="listDisplayOption">listDisplayOption.</param>
        /// <param name="listReturnFieldId">listReturnFieldId.</param>
        /// <param name="multiLine">multiLine.</param>
        /// <param name="promptId">promptId.</param>
        /// <param name="promptType">promptType.</param>
        /// <param name="promptTypeName">promptTypeName.</param>
        /// <param name="required">required.</param>
        /// <param name="text">text.</param>
        /// <param name="value">value.</param>
        /// <param name="values">values.</param>
        public TrebuchetWebApiDataContractsCorePrompt(bool? allowValuesOnly = default(bool?), string busObId = default(string), string collectionStoreEntireRow = default(string), string collectionValueField = default(string), string constraintXml = default(string), string contents = default(string), string _default = default(string), string fieldId = default(string), bool? isDateRange = default(bool?), ListDisplayOptionEnum? listDisplayOption = default(ListDisplayOptionEnum?), string listReturnFieldId = default(string), bool? multiLine = default(bool?), string promptId = default(string), PromptTypeEnum? promptType = default(PromptTypeEnum?), string promptTypeName = default(string), bool? required = default(bool?), string text = default(string), Object value = default(Object), List<string> values = default(List<string>))
        {
            this.AllowValuesOnly = allowValuesOnly;
            this.BusObId = busObId;
            this.CollectionStoreEntireRow = collectionStoreEntireRow;
            this.CollectionValueField = collectionValueField;
            this.ConstraintXml = constraintXml;
            this.Contents = contents;
            this.Default = _default;
            this.FieldId = fieldId;
            this.IsDateRange = isDateRange;
            this.ListDisplayOption = listDisplayOption;
            this.ListReturnFieldId = listReturnFieldId;
            this.MultiLine = multiLine;
            this.PromptId = promptId;
            this.PromptType = promptType;
            this.PromptTypeName = promptTypeName;
            this.Required = required;
            this.Text = text;
            this.Value = value;
            this.Values = values;
        }
        
        /// <summary>
        /// Gets or Sets AllowValuesOnly
        /// </summary>
        [DataMember(Name="allowValuesOnly", EmitDefaultValue=false)]
        public bool? AllowValuesOnly { get; set; }

        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets CollectionStoreEntireRow
        /// </summary>
        [DataMember(Name="collectionStoreEntireRow", EmitDefaultValue=false)]
        public string CollectionStoreEntireRow { get; set; }

        /// <summary>
        /// Gets or Sets CollectionValueField
        /// </summary>
        [DataMember(Name="collectionValueField", EmitDefaultValue=false)]
        public string CollectionValueField { get; set; }

        /// <summary>
        /// Gets or Sets ConstraintXml
        /// </summary>
        [DataMember(Name="constraintXml", EmitDefaultValue=false)]
        public string ConstraintXml { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name="contents", EmitDefaultValue=false)]
        public string Contents { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string Default { get; set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public string FieldId { get; set; }

        /// <summary>
        /// Gets or Sets IsDateRange
        /// </summary>
        [DataMember(Name="isDateRange", EmitDefaultValue=false)]
        public bool? IsDateRange { get; set; }


        /// <summary>
        /// Gets or Sets ListReturnFieldId
        /// </summary>
        [DataMember(Name="listReturnFieldId", EmitDefaultValue=false)]
        public string ListReturnFieldId { get; set; }

        /// <summary>
        /// Gets or Sets MultiLine
        /// </summary>
        [DataMember(Name="multiLine", EmitDefaultValue=false)]
        public bool? MultiLine { get; set; }

        /// <summary>
        /// Gets or Sets PromptId
        /// </summary>
        [DataMember(Name="promptId", EmitDefaultValue=false)]
        public string PromptId { get; set; }


        /// <summary>
        /// Gets or Sets PromptTypeName
        /// </summary>
        [DataMember(Name="promptTypeName", EmitDefaultValue=false)]
        public string PromptTypeName { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsCorePrompt {\n");
            sb.Append("  AllowValuesOnly: ").Append(this.AllowValuesOnly).Append("\n");
            sb.Append("  BusObId: ").Append(this.BusObId).Append("\n");
            sb.Append("  CollectionStoreEntireRow: ").Append(this.CollectionStoreEntireRow).Append("\n");
            sb.Append("  CollectionValueField: ").Append(this.CollectionValueField).Append("\n");
            sb.Append("  ConstraintXml: ").Append(this.ConstraintXml).Append("\n");
            sb.Append("  Contents: ").Append(this.Contents).Append("\n");
            sb.Append("  Default: ").Append(this.Default).Append("\n");
            sb.Append("  FieldId: ").Append(this.FieldId).Append("\n");
            sb.Append("  IsDateRange: ").Append(this.IsDateRange).Append("\n");
            sb.Append("  ListDisplayOption: ").Append(this.ListDisplayOption).Append("\n");
            sb.Append("  ListReturnFieldId: ").Append(this.ListReturnFieldId).Append("\n");
            sb.Append("  MultiLine: ").Append(this.MultiLine).Append("\n");
            sb.Append("  PromptId: ").Append(this.PromptId).Append("\n");
            sb.Append("  PromptType: ").Append(this.PromptType).Append("\n");
            sb.Append("  PromptTypeName: ").Append(this.PromptTypeName).Append("\n");
            sb.Append("  Required: ").Append(this.Required).Append("\n");
            sb.Append("  Text: ").Append(this.Text).Append("\n");
            sb.Append("  Value: ").Append(this.Value).Append("\n");
            sb.Append("  Values: ").Append(this.Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsCorePrompt);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsCorePrompt instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsCorePrompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsCorePrompt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowValuesOnly == input.AllowValuesOnly ||
                    (this.AllowValuesOnly != null &&
                    this.AllowValuesOnly.Equals(input.AllowValuesOnly))
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.CollectionStoreEntireRow == input.CollectionStoreEntireRow ||
                    (this.CollectionStoreEntireRow != null &&
                    this.CollectionStoreEntireRow.Equals(input.CollectionStoreEntireRow))
                ) && 
                (
                    this.CollectionValueField == input.CollectionValueField ||
                    (this.CollectionValueField != null &&
                    this.CollectionValueField.Equals(input.CollectionValueField))
                ) && 
                (
                    this.ConstraintXml == input.ConstraintXml ||
                    (this.ConstraintXml != null &&
                    this.ConstraintXml.Equals(input.ConstraintXml))
                ) && 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                ) && 
                (
                    this.Default == input.Default ||
                    (this.Default != null &&
                    this.Default.Equals(input.Default))
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.IsDateRange == input.IsDateRange ||
                    (this.IsDateRange != null &&
                    this.IsDateRange.Equals(input.IsDateRange))
                ) && 
                (
                    this.ListDisplayOption == input.ListDisplayOption ||
                    (this.ListDisplayOption != null &&
                    this.ListDisplayOption.Equals(input.ListDisplayOption))
                ) && 
                (
                    this.ListReturnFieldId == input.ListReturnFieldId ||
                    (this.ListReturnFieldId != null &&
                    this.ListReturnFieldId.Equals(input.ListReturnFieldId))
                ) && 
                (
                    this.MultiLine == input.MultiLine ||
                    (this.MultiLine != null &&
                    this.MultiLine.Equals(input.MultiLine))
                ) && 
                (
                    this.PromptId == input.PromptId ||
                    (this.PromptId != null &&
                    this.PromptId.Equals(input.PromptId))
                ) && 
                (
                    this.PromptType == input.PromptType ||
                    (this.PromptType != null &&
                    this.PromptType.Equals(input.PromptType))
                ) && 
                (
                    this.PromptTypeName == input.PromptTypeName ||
                    (this.PromptTypeName != null &&
                    this.PromptTypeName.Equals(input.PromptTypeName))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowValuesOnly != null)
                    hashCode = hashCode * 59 + this.AllowValuesOnly.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.CollectionStoreEntireRow != null)
                    hashCode = hashCode * 59 + this.CollectionStoreEntireRow.GetHashCode();
                if (this.CollectionValueField != null)
                    hashCode = hashCode * 59 + this.CollectionValueField.GetHashCode();
                if (this.ConstraintXml != null)
                    hashCode = hashCode * 59 + this.ConstraintXml.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                if (this.Default != null)
                    hashCode = hashCode * 59 + this.Default.GetHashCode();
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.IsDateRange != null)
                    hashCode = hashCode * 59 + this.IsDateRange.GetHashCode();
                if (this.ListDisplayOption != null)
                    hashCode = hashCode * 59 + this.ListDisplayOption.GetHashCode();
                if (this.ListReturnFieldId != null)
                    hashCode = hashCode * 59 + this.ListReturnFieldId.GetHashCode();
                if (this.MultiLine != null)
                    hashCode = hashCode * 59 + this.MultiLine.GetHashCode();
                if (this.PromptId != null)
                    hashCode = hashCode * 59 + this.PromptId.GetHashCode();
                if (this.PromptType != null)
                    hashCode = hashCode * 59 + this.PromptType.GetHashCode();
                if (this.PromptTypeName != null)
                    hashCode = hashCode * 59 + this.PromptTypeName.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
