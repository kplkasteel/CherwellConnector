/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsBusinessObjectFieldDefinition
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsBusinessObjectFieldDefinition :  IEquatable<TrebuchetWebApiDataContractsBusinessObjectFieldDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsBusinessObjectFieldDefinition" /> class.
        /// </summary>
        /// <param name="autoFill">autoFill.</param>
        /// <param name="calculated">calculated.</param>
        /// <param name="category">category.</param>
        /// <param name="decimalDigits">decimalDigits.</param>
        /// <param name="description">description.</param>
        /// <param name="details">details.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="hasDate">hasDate.</param>
        /// <param name="hasTime">hasTime.</param>
        /// <param name="isFullTextSearchable">isFullTextSearchable.</param>
        /// <param name="maximumSize">maximumSize.</param>
        /// <param name="name">name.</param>
        /// <param name="readOnly">readOnly.</param>
        /// <param name="required">required.</param>
        /// <param name="type">type.</param>
        /// <param name="typeLocalized">typeLocalized.</param>
        /// <param name="validated">validated.</param>
        /// <param name="wholeDigits">wholeDigits.</param>
        public TrebuchetWebApiDataContractsBusinessObjectFieldDefinition(bool? autoFill = default(bool?), bool? calculated = default(bool?), string category = default(string), int? decimalDigits = default(int?), string description = default(string), string details = default(string), string displayName = default(string), bool? enabled = default(bool?), string fieldId = default(string), bool? hasDate = default(bool?), bool? hasTime = default(bool?), bool? isFullTextSearchable = default(bool?), string maximumSize = default(string), string name = default(string), bool? readOnly = default(bool?), bool? required = default(bool?), string type = default(string), string typeLocalized = default(string), bool? validated = default(bool?), int? wholeDigits = default(int?))
        {
            this.AutoFill = autoFill;
            this.Calculated = calculated;
            this.Category = category;
            this.DecimalDigits = decimalDigits;
            this.Description = description;
            this.Details = details;
            this.DisplayName = displayName;
            this.Enabled = enabled;
            this.FieldId = fieldId;
            this.HasDate = hasDate;
            this.HasTime = hasTime;
            this.IsFullTextSearchable = isFullTextSearchable;
            this.MaximumSize = maximumSize;
            this.Name = name;
            this.ReadOnly = readOnly;
            this.Required = required;
            this.Type = type;
            this.TypeLocalized = typeLocalized;
            this.Validated = validated;
            this.WholeDigits = wholeDigits;
        }
        
        /// <summary>
        /// Gets or Sets AutoFill
        /// </summary>
        [DataMember(Name="autoFill", EmitDefaultValue=false)]
        public bool? AutoFill { get; set; }

        /// <summary>
        /// Gets or Sets Calculated
        /// </summary>
        [DataMember(Name="calculated", EmitDefaultValue=false)]
        public bool? Calculated { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets DecimalDigits
        /// </summary>
        [DataMember(Name="decimalDigits", EmitDefaultValue=false)]
        public int? DecimalDigits { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public string FieldId { get; set; }

        /// <summary>
        /// Gets or Sets HasDate
        /// </summary>
        [DataMember(Name="hasDate", EmitDefaultValue=false)]
        public bool? HasDate { get; set; }

        /// <summary>
        /// Gets or Sets HasTime
        /// </summary>
        [DataMember(Name="hasTime", EmitDefaultValue=false)]
        public bool? HasTime { get; set; }

        /// <summary>
        /// Gets or Sets IsFullTextSearchable
        /// </summary>
        [DataMember(Name="isFullTextSearchable", EmitDefaultValue=false)]
        public bool? IsFullTextSearchable { get; set; }

        /// <summary>
        /// Gets or Sets MaximumSize
        /// </summary>
        [DataMember(Name="maximumSize", EmitDefaultValue=false)]
        public string MaximumSize { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TypeLocalized
        /// </summary>
        [DataMember(Name="typeLocalized", EmitDefaultValue=false)]
        public string TypeLocalized { get; set; }

        /// <summary>
        /// Gets or Sets Validated
        /// </summary>
        [DataMember(Name="validated", EmitDefaultValue=false)]
        public bool? Validated { get; set; }

        /// <summary>
        /// Gets or Sets WholeDigits
        /// </summary>
        [DataMember(Name="wholeDigits", EmitDefaultValue=false)]
        public int? WholeDigits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsBusinessObjectFieldDefinition {\n");
            sb.Append("  AutoFill: ").Append(this.AutoFill).Append("\n");
            sb.Append("  Calculated: ").Append(this.Calculated).Append("\n");
            sb.Append("  Category: ").Append(this.Category).Append("\n");
            sb.Append("  DecimalDigits: ").Append(this.DecimalDigits).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  Details: ").Append(this.Details).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  Enabled: ").Append(this.Enabled).Append("\n");
            sb.Append("  FieldId: ").Append(this.FieldId).Append("\n");
            sb.Append("  HasDate: ").Append(this.HasDate).Append("\n");
            sb.Append("  HasTime: ").Append(this.HasTime).Append("\n");
            sb.Append("  IsFullTextSearchable: ").Append(this.IsFullTextSearchable).Append("\n");
            sb.Append("  MaximumSize: ").Append(this.MaximumSize).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  ReadOnly: ").Append(this.ReadOnly).Append("\n");
            sb.Append("  Required: ").Append(this.Required).Append("\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  TypeLocalized: ").Append(this.TypeLocalized).Append("\n");
            sb.Append("  Validated: ").Append(this.Validated).Append("\n");
            sb.Append("  WholeDigits: ").Append(this.WholeDigits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsBusinessObjectFieldDefinition);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsBusinessObjectFieldDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsBusinessObjectFieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsBusinessObjectFieldDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoFill == input.AutoFill ||
                    (this.AutoFill != null &&
                    this.AutoFill.Equals(input.AutoFill))
                ) && 
                (
                    this.Calculated == input.Calculated ||
                    (this.Calculated != null &&
                    this.Calculated.Equals(input.Calculated))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.DecimalDigits == input.DecimalDigits ||
                    (this.DecimalDigits != null &&
                    this.DecimalDigits.Equals(input.DecimalDigits))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.HasDate == input.HasDate ||
                    (this.HasDate != null &&
                    this.HasDate.Equals(input.HasDate))
                ) && 
                (
                    this.HasTime == input.HasTime ||
                    (this.HasTime != null &&
                    this.HasTime.Equals(input.HasTime))
                ) && 
                (
                    this.IsFullTextSearchable == input.IsFullTextSearchable ||
                    (this.IsFullTextSearchable != null &&
                    this.IsFullTextSearchable.Equals(input.IsFullTextSearchable))
                ) && 
                (
                    this.MaximumSize == input.MaximumSize ||
                    (this.MaximumSize != null &&
                    this.MaximumSize.Equals(input.MaximumSize))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    (this.ReadOnly != null &&
                    this.ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeLocalized == input.TypeLocalized ||
                    (this.TypeLocalized != null &&
                    this.TypeLocalized.Equals(input.TypeLocalized))
                ) && 
                (
                    this.Validated == input.Validated ||
                    (this.Validated != null &&
                    this.Validated.Equals(input.Validated))
                ) && 
                (
                    this.WholeDigits == input.WholeDigits ||
                    (this.WholeDigits != null &&
                    this.WholeDigits.Equals(input.WholeDigits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoFill != null)
                    hashCode = hashCode * 59 + this.AutoFill.GetHashCode();
                if (this.Calculated != null)
                    hashCode = hashCode * 59 + this.Calculated.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.DecimalDigits != null)
                    hashCode = hashCode * 59 + this.DecimalDigits.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.HasDate != null)
                    hashCode = hashCode * 59 + this.HasDate.GetHashCode();
                if (this.HasTime != null)
                    hashCode = hashCode * 59 + this.HasTime.GetHashCode();
                if (this.IsFullTextSearchable != null)
                    hashCode = hashCode * 59 + this.IsFullTextSearchable.GetHashCode();
                if (this.MaximumSize != null)
                    hashCode = hashCode * 59 + this.MaximumSize.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReadOnly != null)
                    hashCode = hashCode * 59 + this.ReadOnly.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeLocalized != null)
                    hashCode = hashCode * 59 + this.TypeLocalized.GetHashCode();
                if (this.Validated != null)
                    hashCode = hashCode * 59 + this.Validated.GetHashCode();
                if (this.WholeDigits != null)
                    hashCode = hashCode * 59 + this.WholeDigits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
