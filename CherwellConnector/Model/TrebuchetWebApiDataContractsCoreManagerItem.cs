/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsCoreManagerItem
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsCoreManagerItem :  IEquatable<TrebuchetWebApiDataContractsCoreManagerItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsCoreManagerItem" /> class.
        /// </summary>
        /// <param name="association">association.</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="galleryImage">galleryImage.</param>
        /// <param name="id">id.</param>
        /// <param name="links">links.</param>
        /// <param name="localizedScopeName">localizedScopeName.</param>
        /// <param name="name">name.</param>
        /// <param name="parentFolder">parentFolder.</param>
        /// <param name="parentIsScopeFolder">parentIsScopeFolder.</param>
        /// <param name="scope">scope.</param>
        /// <param name="scopeOwner">scopeOwner.</param>
        /// <param name="standInKey">standInKey.</param>
        public TrebuchetWebApiDataContractsCoreManagerItem(string association = default(string), string description = default(string), string displayName = default(string), string galleryImage = default(string), string id = default(string), List<TrebuchetWebApiDataContractsCoreLink> links = default(List<TrebuchetWebApiDataContractsCoreLink>), string localizedScopeName = default(string), string name = default(string), string parentFolder = default(string), bool? parentIsScopeFolder = default(bool?), string scope = default(string), string scopeOwner = default(string), string standInKey = default(string))
        {
            this.Association = association;
            this.Description = description;
            this.DisplayName = displayName;
            this.GalleryImage = galleryImage;
            this.Id = id;
            this.Links = links;
            this.LocalizedScopeName = localizedScopeName;
            this.Name = name;
            this.ParentFolder = parentFolder;
            this.ParentIsScopeFolder = parentIsScopeFolder;
            this.Scope = scope;
            this.ScopeOwner = scopeOwner;
            this.StandInKey = standInKey;
        }
        
        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public string Association { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets GalleryImage
        /// </summary>
        [DataMember(Name="galleryImage", EmitDefaultValue=false)]
        public string GalleryImage { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<TrebuchetWebApiDataContractsCoreLink> Links { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedScopeName
        /// </summary>
        [DataMember(Name="localizedScopeName", EmitDefaultValue=false)]
        public string LocalizedScopeName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentFolder
        /// </summary>
        [DataMember(Name="parentFolder", EmitDefaultValue=false)]
        public string ParentFolder { get; set; }

        /// <summary>
        /// Gets or Sets ParentIsScopeFolder
        /// </summary>
        [DataMember(Name="parentIsScopeFolder", EmitDefaultValue=false)]
        public bool? ParentIsScopeFolder { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ScopeOwner
        /// </summary>
        [DataMember(Name="scopeOwner", EmitDefaultValue=false)]
        public string ScopeOwner { get; set; }

        /// <summary>
        /// Gets or Sets StandInKey
        /// </summary>
        [DataMember(Name="standInKey", EmitDefaultValue=false)]
        public string StandInKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsCoreManagerItem {\n");
            sb.Append("  Association: ").Append(this.Association).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  GalleryImage: ").Append(this.GalleryImage).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Links: ").Append(this.Links).Append("\n");
            sb.Append("  LocalizedScopeName: ").Append(this.LocalizedScopeName).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  ParentFolder: ").Append(this.ParentFolder).Append("\n");
            sb.Append("  ParentIsScopeFolder: ").Append(this.ParentIsScopeFolder).Append("\n");
            sb.Append("  Scope: ").Append(this.Scope).Append("\n");
            sb.Append("  ScopeOwner: ").Append(this.ScopeOwner).Append("\n");
            sb.Append("  StandInKey: ").Append(this.StandInKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsCoreManagerItem);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsCoreManagerItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsCoreManagerItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsCoreManagerItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Association == input.Association ||
                    (this.Association != null &&
                    this.Association.Equals(input.Association))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.GalleryImage == input.GalleryImage ||
                    (this.GalleryImage != null &&
                    this.GalleryImage.Equals(input.GalleryImage))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.LocalizedScopeName == input.LocalizedScopeName ||
                    (this.LocalizedScopeName != null &&
                    this.LocalizedScopeName.Equals(input.LocalizedScopeName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentFolder == input.ParentFolder ||
                    (this.ParentFolder != null &&
                    this.ParentFolder.Equals(input.ParentFolder))
                ) && 
                (
                    this.ParentIsScopeFolder == input.ParentIsScopeFolder ||
                    (this.ParentIsScopeFolder != null &&
                    this.ParentIsScopeFolder.Equals(input.ParentIsScopeFolder))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwner == input.ScopeOwner ||
                    (this.ScopeOwner != null &&
                    this.ScopeOwner.Equals(input.ScopeOwner))
                ) && 
                (
                    this.StandInKey == input.StandInKey ||
                    (this.StandInKey != null &&
                    this.StandInKey.Equals(input.StandInKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Association != null)
                    hashCode = hashCode * 59 + this.Association.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.GalleryImage != null)
                    hashCode = hashCode * 59 + this.GalleryImage.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.LocalizedScopeName != null)
                    hashCode = hashCode * 59 + this.LocalizedScopeName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentFolder != null)
                    hashCode = hashCode * 59 + this.ParentFolder.GetHashCode();
                if (this.ParentIsScopeFolder != null)
                    hashCode = hashCode * 59 + this.ParentIsScopeFolder.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwner != null)
                    hashCode = hashCode * 59 + this.ScopeOwner.GetHashCode();
                if (this.StandInKey != null)
                    hashCode = hashCode * 59 + this.StandInKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
