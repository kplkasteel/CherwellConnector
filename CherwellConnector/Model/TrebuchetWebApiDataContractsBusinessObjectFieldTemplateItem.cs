/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace CherwellConnector.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem
    /// </summary>
    [DataContract]
    public partial class TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem :  IEquatable<TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem" /> class.
        /// </summary>
        /// <param name="dirty">dirty.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="fullFieldId">fullFieldId.</param>
        /// <param name="html">html.</param>
        /// <param name="name">name.</param>
        /// <param name="value">value.</param>
        public TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem(bool? dirty = default(bool?), string displayName = default(string), string fieldId = default(string), string fullFieldId = default(string), string html = default(string), string name = default(string), string value = default(string))
        {
            this.Dirty = dirty;
            this.DisplayName = displayName;
            this.FieldId = fieldId;
            this.FullFieldId = fullFieldId;
            this.Html = html;
            this.Name = name;
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets Dirty
        /// </summary>
        [DataMember(Name="dirty", EmitDefaultValue=false)]
        public bool? Dirty { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public string FieldId { get; set; }

        /// <summary>
        /// Gets or Sets FullFieldId
        /// </summary>
        [DataMember(Name="fullFieldId", EmitDefaultValue=false)]
        public string FullFieldId { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem {\n");
            sb.Append("  Dirty: ").Append(this.Dirty).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  FieldId: ").Append(this.FieldId).Append("\n");
            sb.Append("  FullFieldId: ").Append(this.FullFieldId).Append("\n");
            sb.Append("  Html: ").Append(this.Html).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Value: ").Append(this.Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem);
        }

        /// <summary>
        /// Returns true if TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrebuchetWebApiDataContractsBusinessObjectFieldTemplateItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dirty == input.Dirty ||
                    (this.Dirty != null &&
                    this.Dirty.Equals(input.Dirty))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.FullFieldId == input.FullFieldId ||
                    (this.FullFieldId != null &&
                    this.FullFieldId.Equals(input.FullFieldId))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dirty != null)
                    hashCode = hashCode * 59 + this.Dirty.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.FullFieldId != null)
                    hashCode = hashCode * 59 + this.FullFieldId.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
